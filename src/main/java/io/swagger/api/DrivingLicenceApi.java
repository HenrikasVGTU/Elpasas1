/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DrivingLicence;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-02T16:04:50.980Z")

@Api(value = "drivingLicence", description = "the drivingLicence API")
@RequestMapping(value = "/api")
public interface DrivingLicenceApi {

    @ApiOperation(value = "Get Driving Licence for the User", nickname = "getDrivingLicence", notes = "", response = DrivingLicence.class, authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Driving Licence model", response = DrivingLicence.class),
        @ApiResponse(code = 404, message = "Driving Licence for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DrivingLicence> getDrivingLicence(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"4a_dateOfIssue\" : \"24 11 2016\",  \"4c_issuedBy\" : \"VÄ® Regitra\",  \"2_name\" : \"Vardenis\",  \"4b_dateOfExpiry\" : \"24 11 2026\",  \"3_dateOfBirth\" : \"01 01 1985\",  \"4d_personalNo\" : 31234567890,  \"1_surname\" : \"Pavardenis\",  \"5_licenceNo\" : 35983081,  \"categories\" : [ {    \"9_name\" : \"AM\",    \"12_code\" : \"95.(24.11.21)\",    \"11_dateOfExpiry\" : \"24.11.21\",    \"10_dateOfIssue\" : \"19.01.13\"  }, {    \"9_name\" : \"AM\",    \"12_code\" : \"95.(24.11.21)\",    \"11_dateOfExpiry\" : \"24.11.21\",    \"10_dateOfIssue\" : \"19.01.13\"  } ]}", DrivingLicence.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get profile image for the Driving Licence which belongs to the User", nickname = "getDrivingLicenceImage", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Driving Licence profile image"),
        @ApiResponse(code = 404, message = "Driving Licence image for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}/image",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getDrivingLicenceImage(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get small profile image for the Driving Licence which belongs to the User", nickname = "getDrivingLicenceImageSmall", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Driving Licence small profile image"),
        @ApiResponse(code = 404, message = "Driving Licence small image for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}/image/small",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getDrivingLicenceImageSmall(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get NFC code for the Driving Licence which belongs to the User", nickname = "getDrivingLicenceNfc", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Driving Licence NFC code"),
        @ApiResponse(code = 404, message = "Driving Licence NFC code for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}/nfc",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getDrivingLicenceNfc(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get QR code for the Driving Licence which belongs to the User", nickname = "getDrivingLicenceQr", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Driving Licence QR code"),
        @ApiResponse(code = 404, message = "Driving Licence QR code for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}/qr",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getDrivingLicenceQr(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get signature image for the Driving Licence which belongs to the User", nickname = "getDrivingLicenceSignature", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Driving Licence signature image"),
        @ApiResponse(code = 404, message = "Driving Licence signature image for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}/signature",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getDrivingLicenceSignature(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update profile image for the Driving Licence which belongs to the User", nickname = "putDrivingLicenceImage", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully uploaded Driving Licence profile image"),
        @ApiResponse(code = 400, message = "Provided image is invalid") })
    @RequestMapping(value = "/drivingLicence/{userId}/image",
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putDrivingLicenceImage(@ApiParam(value = "",required=true) @PathVariable("userId") String userId,@ApiParam(value = "Image to upload") @Valid @RequestPart(value="image", required=true) MultipartFile image) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Request to revalidate and extend expiration for Driving Licence", nickname = "putDrivingLicenceValidation", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "DrivingLicence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully requested Driving Licence revalidation"),
        @ApiResponse(code = 404, message = "Driving Licence for this {userId} not found") })
    @RequestMapping(value = "/drivingLicence/{userId}/validate",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putDrivingLicenceValidation(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DrivingLicenceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
