/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Passport;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-02T16:04:50.980Z")

@Api(value = "passport", description = "the passport API")
@RequestMapping(value = "/api")
public interface PassportApi {

    @ApiOperation(value = "Get Passport for the User", nickname = "getPassport", notes = "", response = Passport.class, authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Passport model", response = Passport.class),
        @ApiResponse(code = 404, message = "Passport for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Passport> getPassport(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"passportNo\" : 14951794,  \"dateOfExpiry\" : \"02 01 2029\",  \"placeOfBirth\" : \"Lietuva\",  \"nationality\" : \"Lietuvos Respublikos\",  \"footer\" : \"P<LTUBASANAVICIENE<<BIRUTE<<<<<<<<<<<<<<<<<<14951794<0LTU90031187290102049003111045<<<86\",  \"surname\" : \"Basanavičienė\",  \"givenName\" : \"Birutė\",  \"sex\" : \"MOT/F\",  \"authority\" : \"Vilnius (19)\",  \"personalNo\" : 49003111045,  \"dateOfBirth\" : \"11 03 1990\",  \"dateOfIssue\" : \"02 01 2019\"}", Passport.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get profile image for the Passport which belongs to the User", nickname = "getPassportImage", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Passport profile image"),
        @ApiResponse(code = 404, message = "Passport image for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}/image",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getPassportImage(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get small profile image for the Passport which belongs to the User", nickname = "getPassportImageSmall", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Passport small profile image"),
        @ApiResponse(code = 404, message = "Passport small image for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}/image/small",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getPassportImageSmall(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get NFC code for the Passport which belongs to the User", nickname = "getPassportNfc", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Passport NFC code"),
        @ApiResponse(code = 404, message = "Passport NFC code for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}/nfc",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getPassportNfc(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get QR code for the Passport which belongs to the User", nickname = "getPassportQr", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Passport QR code"),
        @ApiResponse(code = 404, message = "Passport QR code for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}/qr",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getPassportQr(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get signature image for the Passport which belongs to the User", nickname = "getPassportSignature", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved Passport signature image"),
        @ApiResponse(code = 404, message = "Passport signature image for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}/signature",
        produces = { "image/jpeg" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getPassportSignature(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update profile image for the Passport which belongs to the User", nickname = "putPassportImage", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully uploaded Passport profile image"),
        @ApiResponse(code = 400, message = "Provided image is invalid") })
    @RequestMapping(value = "/passport/{userId}/image",
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putPassportImage(@ApiParam(value = "",required=true) @PathVariable("userId") String userId,@ApiParam(value = "Image to upload") @Valid @RequestPart(value="image", required=true) MultipartFile image) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Request to revalidate and extend expiration for Passport", nickname = "putPassportValidation", notes = "", authorizations = {
        @Authorization(value = "Token")
    }, tags={ "Passport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successfully requested Passport revalidation"),
        @ApiResponse(code = 404, message = "Passport for this {userId} not found") })
    @RequestMapping(value = "/passport/{userId}/validate",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putPassportValidation(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PassportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
